import tkinter as tk
from tkinter import ttk
import psycopg2
from datetime import datetime

# Conectar a la base de datos PostgreSQL
conn = psycopg2.connect(
    dbname="gestion_acceso_trole",
    user="miusuario",
    password="1234",
    host="localhost",
    port="5432"
)
cursor = conn.cursor()

# Crear la tabla para almacenar las tarjetas, si no existe
cursor.execute('''
CREATE TABLE IF NOT EXISTS tarjetas (
    Trole VARCHAR(255),
    id_tarjeta VARCHAR(255) PRIMARY KEY,
    Tipo VARCHAR(255),
    Patio VARCHAR(255),
    Resguardo VARCHAR(255),
    FechaLectura TIMESTAMP
)
''')

# Crear la tabla para almacenar las lecturas, si no existe
cursor.execute('''
CREATE TABLE IF NOT EXISTS lecturas (
    id SERIAL PRIMARY KEY,
    id_tarjeta VARCHAR(255),
    Trole VARCHAR(255),
    Tipo VARCHAR(255),
    Patio VARCHAR(255),
    Resguardo VARCHAR(255),
    FechaLectura TIMESTAMP,
    FOREIGN KEY(id_tarjeta) REFERENCES tarjetas(id_tarjeta)
)
''')

# Datos iniciales (sin la fecha de lectura)
tarjetas_iniciales = [
    ("22001", "0004978112", "Remolque", "Tetepilco", "Si"),
    ("22002", "0004964545", "Doble Remolque", "Tetepilco", "No"),
    ("22003", "0011372157", "Doble Remolque", "Aragon", "Si"),
    ("22004", "0011378900", "Remolque", "Aragon", "Si"),
    ("22005", "0011409769", "Doble Remolque", "Tetepilco", "No")
]

# Insertar los datos iniciales en la tabla tarjetas
cursor.executemany('''
INSERT INTO tarjetas (Trole, id_tarjeta, Tipo, Patio, Resguardo)
VALUES (%s, %s, %s, %s, %s)
ON CONFLICT (id_tarjeta) DO NOTHING
''', tarjetas_iniciales)

# Confirmar los cambios
conn.commit()

# Función para verificar el id_tarjeta
def verificar_tarjeta(id_tarjeta):
    cursor.execute('SELECT * FROM tarjetas WHERE id_tarjeta = %s', (id_tarjeta,))
    return cursor.fetchone()

# Función para obtener todas las tarjetas
def obtener_tarjetas():
    cursor.execute('SELECT * FROM tarjetas')
    return cursor.fetchall()

# Función para obtener todas las lecturas
def obtener_lecturas():
    cursor.execute('SELECT * FROM lecturas')
    return cursor.fetchall()

# Crear la interfaz gráfica
root = tk.Tk()
root.title("Gestión de Acceso a Trole")

# Crear los frames
frame_tarjetas = ttk.LabelFrame(root, text="Tarjetas")
frame_tarjetas.pack(fill="both", expand="yes", padx=10, pady=10)

frame_lecturas = ttk.LabelFrame(root, text="Lecturas")
frame_lecturas.pack(fill="both", expand="yes", padx=10, pady=10)

# Crear los Treeviews
tree_tarjetas = ttk.Treeview(frame_tarjetas, columns=("Trole", "id_tarjeta", "Tipo", "Patio", "Resguardo", "FechaLectura"), show="headings")
tree_lecturas = ttk.Treeview(frame_lecturas, columns=("id", "id_tarjeta", "Trole", "Tipo", "Patio", "Resguardo", "FechaLectura"), show="headings")

# Definir los encabezados
for col in tree_tarjetas["columns"]:
    tree_tarjetas.heading(col, text=col)

for col in tree_lecturas["columns"]:
    tree_lecturas.heading(col, text=col)

# Colocar los Treeviews
tree_tarjetas.pack(fill="both", expand=True)
tree_lecturas.pack(fill="both", expand=True)

# Función para actualizar los Treeviews
def actualizar_treeviews():
    # Limpiar los Treeviews
    for i in tree_tarjetas.get_children():
        tree_tarjetas.delete(i)
    for i in tree_lecturas.get_children():
        tree_lecturas.delete(i)
    
    # Obtener datos y agregarlos a los Treeviews
    for row in obtener_tarjetas():
        tree_tarjetas.insert("", "end", values=row)
    for row in obtener_lecturas():
        tree_lecturas.insert("", "end", values=row)

# Botón para actualizar
btn_actualizar = ttk.Button(root, text="Actualizar", command=actualizar_treeviews)
btn_actualizar.pack(pady=10)

# Iniciar la interfaz gráfica
actualizar_treeviews()  # Llenar los treeviews al inicio
root.mainloop()

# Cerrar la conexión a la base de datos
cursor.close()
conn.close()
